package com.melon.service.impl;

import com.melon.dto.CurrentUser;
import com.melon.dto.RegisterRequest;
import com.melon.entity.AppUser;
import com.melon.entity.Oauth2Provider;
import com.melon.entity.Role;
import com.melon.entity.RoleEnum;
import com.melon.exception.ExceptionMessage;
import com.melon.repository.RoleRepository;
import com.melon.repository.UserRepository;
import com.melon.security.oauth2.user.OAuth2UserInfo;
import com.melon.security.oauth2.user.OAuth2UserInfoFactory;
import com.melon.service.UserService;
import io.jsonwebtoken.ExpiredJwtException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserRepository userRepository;
    @Autowired
    RoleRepository roleRepository;
    @Autowired
    private TokenService tokenService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Override
    public AppUser saveUser(AppUser user) {

        AppUser savedUser = userRepository.saveAndFlush(user);
        return savedUser;
    }

    @Override
    public AppUser getUser(String id) {

        AppUser user = userRepository.findById(UUID.fromString(id)).orElseThrow(() ->
                new UsernameNotFoundException("User with id: " + id + "does not exist"));
        return user;
    }

    @Override
    public AppUser findUserByEmail(String email) {

        return userRepository.findByEmail(email).orElseThrow(() -> new UsernameNotFoundException("User with email: " + email + "does not exist"));
    }

    @Override
    public AppUser register(RegisterRequest request) {

        // Form registration without OAuth2 provider userId
        String providerUserId = null;
        String fullName = request.getFullName() != null ?
                request.getFullName(): request.getFirstName() + " " + request.getLastName();
        // OAuth2 Registration with userId generated by OAuth2 providers
        if (Oauth2Provider.LOCAL.getProvider() != request.getProvider()){

            providerUserId = request.getProviderUserId();
            request.setPassword("changemelater");
        }

        Role role = roleRepository.saveAndFlush(new Role(RoleEnum.USER));
        AppUser appUser = AppUser.builder()
                .providerUserId(providerUserId)
                .appUserName(fullName)
                .password(passwordEncoder.encode(request.getPassword()))
                .email(request.getEmail())
                .provider(request.getProvider())
                .roles(Set.of(role))
                .build();
        AppUser registeredUser = this.saveUser(appUser);
        return registeredUser;
    }

//    @Override
//    public AuthenticationResponse authenticate(String userName, String credentials) {
//
//        UserDetails userDetails = this.userDetailsService.loadUserByUsername(userName);
//        // user does not exist
//        if (userDetails == null){
//            return null;
//        }
//        // unmatched credentials
//        if (!passwordEncoder.matches(credentials, userDetails.getPassword())){
//            return null;
//        }
//        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(userName, credentials, userDetails.getAuthorities());
//        this.authenticationManager.authenticate(authentication);
//
//        String jwt = tokenStore.generateToken(userDetails);
//        return AuthenticationResponse.builder()
//                .token(jwt)
//                .build();
//    }

    public CurrentUser processRegistration(String registrationId, Map<String, Object> attributes){

        OAuth2UserInfo userInfo = OAuth2UserInfoFactory.getOAuth2UserInfo(registrationId, attributes);
        RegisterRequest registerRequest = RegisterRequest.builder()
                .providerUserId(userInfo.getId())
                .email(userInfo.getEmail())
                .fullName(userInfo.getName())
                .provider(registrationId)
                .build();
        AppUser user = userRepository.findByProviderUserId(userInfo.getId()).orElse(null);
        if (user != null){
            if (!registrationId.equalsIgnoreCase(user.getProvider())){
                throw new RuntimeException("You have registered using " + user.getProvider() + "account");
            }
            user = updateExistedUser(user, userInfo);
        }else{
            user = register(registerRequest);
        }
        return new CurrentUser(user);
    }

    private AppUser updateExistedUser(AppUser user, OAuth2UserInfo userInfo) {
        user.setAppUserName(userInfo.getName());
//        user.setEmail(userInfo.getEmail());
        return userRepository.saveAndFlush(user);
    }

    @Override
    public AppUser findUserById(UUID id) {

        return userRepository.findById(id).orElseThrow(() -> new UsernameNotFoundException("User with id: " + id + " does not exist"));
    }

    @Override
    public void logout(String token) {
        String userId;
        try{

            userId = tokenService.extractUserId(token);
            tokenService.removeCurrentToken(userId);
        }catch (ExpiredJwtException exception){
            throw new RuntimeException(ExceptionMessage.SIGNED_OUT_USER.getMessage());
        }
    }
}
